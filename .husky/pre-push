#!/bin/sh

# Previeni loop infinito - Skip se chiamato dal release system
if [ "$SKIP_PRE_PUSH_HOOK" = "true" ]; then
    echo "🔄 Skipping pre-push hook (called from release system)"
    exit 0
fi

# Controllo se si tratta di una cancellazione di branch remoto
# Il comando `git push origin --delete branch_name` non dovrebbe lanciare hook
read local_ref local_sha remote_ref remote_sha

# Se si tratta di una cancellazione di branch (local_sha è tutto zeri), salta i controlli
if [ "$local_sha" = "0000000000000000000000000000000000000000" ]; then
    echo "🗑️  Branch deletion detected - skipping pre-push checks"
    exit 0
fi

# Se si tratta di creazione di branch (remote_sha è tutto zeri), esegui i controlli
if [ "$remote_sha" = "0000000000000000000000000000000000000000" ]; then
    echo "🆕 New branch creation detected - running pre-push checks"
elif [ "$local_sha" != "$remote_sha" ]; then
    echo "🔄 Branch update detected - running pre-push checks"
else
    echo "✅ No changes detected - skipping pre-push checks"
    exit 0
fi

echo "🚀 Running pre-push checks for production readiness..."

# Quick build verification only (tests will run in CI/CD)
echo "🏗️ Verifying build..."
npm run build

echo "✅ Pre-push checks passed! Ready to push to production."

# Step 3: Automated Release Management
echo ""
echo "🔍 Checking for automated release needs..."

# Verifica se siamo sul branch main/master
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
    echo "📝 Skipping release check - not on main/master branch (current: $CURRENT_BRANCH)"
    exit 0
fi

# Verifica che il working directory sia pulito
if [ -n "$(git status --porcelain)" ]; then
    echo "⚠️  Working directory not clean - commit or stash changes first"
    echo "📝 Proceeding with push only - no automated release"
    exit 0
fi

# Ottieni l'ultimo tag per confrontare i commit
LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
if [ -z "$LAST_TAG" ]; then
    # Se non ci sono tag, controlla dall'inizio
    COMMITS_SINCE_LAST=""
    echo "📝 No previous tags found - checking all commits"
else
    # Controlla i commit dal last tag
    COMMITS_SINCE_LAST=$(git log ${LAST_TAG}..HEAD --oneline)
    echo "📝 Checking commits since last tag: $LAST_TAG"
fi

# Controlla se ci sono commit semantici
SEMANTIC_COMMITS=$(git log ${LAST_TAG:+$LAST_TAG..}HEAD --pretty=format:"%s" | grep -E "^(feat|fix|BREAKING CHANGE)" || true)

if [ -n "$SEMANTIC_COMMITS" ]; then
    echo "🚀 Semantic commits detected!"
    echo "$SEMANTIC_COMMITS" | while IFS= read -r commit; do
        echo "  - $commit"
    done
    
    # Verifica che gli script siano disponibili
    if [ -f "scripts/auto-release.js" ] && [ -f "scripts/release-analyzer.js" ]; then
        echo ""
        echo "🔄 Starting automated release workflow..."
        echo "   1. Update package.json and package-lock.json"
        echo "   2. Generate changelog and release notes"
        echo "   3. Commit release files"
        echo "   4. Create and push tag"
        echo ""

        # Imposta la variabile per evitare loop infinito nei push successivi
        export SKIP_PRE_PUSH_HOOK=true

        # Esegue il rilascio automatico con nuovo workflow
        echo "🔄 Executing: node scripts/auto-release.js --type=\"auto\" --workflow=true"
        node scripts/auto-release.js --type="auto" --workflow=true
        AUTO_RELEASE_EXIT_CODE=$?

        # Rimuovi la variabile
        unset SKIP_PRE_PUSH_HOOK

        if [ $AUTO_RELEASE_EXIT_CODE -eq 0 ]; then
            echo "🎉 Automated release workflow completed successfully!"
            echo "📝 Release files committed and tagged - pushing to remote"
        else
            echo "⚠️  Automated release workflow failed with exit code: $AUTO_RELEASE_EXIT_CODE"
            echo "📝 Proceeding with original push only - manual release may be needed"
        fi
    else
        echo "⚠️  Release scripts not found, skipping automated release"
    fi
else
    echo "📝 No semantic commits found - proceeding with push only"
fi

echo "🚀 Pre-push hook completed successfully"
